extern crate rpassword;
extern crate reqwest;
extern crate rand;

use std::io::{self, Write};
use std::collections::HashMap;
use rand::Rng;

fn get_credentials() -> (String, String)
{
    let mut username = String::new();
    print!("Username: ");
    io::stdout().flush().unwrap();
    io::stdin().read_line(&mut username).expect("Failed to read line");

    let password = rpassword::prompt_password_stdout("Password: ").unwrap();

    (String::from(username.trim()), password)
}

fn get_approval_duration() -> (char)
{
    let mut duration_str = String::new();
    let mut duration: char;

    loop
    {
        print!("Session duration (1: one hour (default), 2: one day): ");
        io::stdout().flush().unwrap();
        io::stdin().read_line(&mut duration_str).expect("Failed to read line");

        if duration_str.trim().is_empty()
        {
            duration = '1';
            break;
        }
        else
        {
            duration = duration_str.chars().nth(0).unwrap();

            if duration == '1'
            {
                println!("You have requested approval for one hour");
                break;
            }
            else if duration == '2'
            {
                println!("You have requested approval for one day");
                break;
            }
            else
            {
                println!("Enter a valid option");
                duration_str.clear();
            }
        }
    }

    duration
}

fn serialize_credentials(username: &String, password: &String) -> HashMap<String,String>
{
    let mut data = HashMap::new();
    data.insert("userLogin".to_string(), (*username).clone());
    data.insert("userPassword".to_string(), (*password).clone());

    data
}

fn create_cookie() -> reqwest::header::Cookie
{
    let mut cookie = reqwest::header::Cookie::new();
    let mut sess_id = String::from("iitm-netaccess-cmd");
    let mut rand_num;

    for _j in 1..6
    {
        rand_num = rand::thread_rng().gen_range(1, 101);
        sess_id.push_str(&(rand_num.to_string()));
    }

    cookie.append("PHPSESSID", sess_id);
    cookie
}

fn create_post_headers() -> reqwest::header::Headers
{
    let user_agent = "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:49.0) Gecko/20100101 Firefox/49.0";

    let mut my_header = reqwest::header::Headers::new();
    my_header.set(reqwest::header::UserAgent::new(user_agent));
    my_header.set(create_cookie());

    my_header
}

fn do_login(url: &reqwest::Url, username: &String, password: &String, my_headers: &(reqwest::header::Headers)) -> bool
{
    let my_data = serialize_credentials(username, password);

    let client = reqwest::Client::new();
    let mut res = client.post((*url).clone())
        .headers((*my_headers).clone())
        .form(&my_data)
        .send()
        .expect("Failed to send login request");

    let mut my_status = true;
    if res.status() != reqwest::StatusCode::Ok
    {
        my_status = false;
        println!("Error logging in. Return status {}.", res.status());
    }
    else
    {
        if !res.text().unwrap().contains("/account/approve")
        {
            my_status = false;
            println!("Failed to login. Wrong credentials supplied.");
        }
        else
        {
            println!("Login successful");
        }
    }

    my_status

}

fn serialize_duration(duration: &char) -> HashMap<String,char>
{
    let mut data = HashMap::new();
    data.insert("duration".to_string(), (*duration).clone());
    data.insert("approveBtn".to_string(), ' ');

    data
}

fn do_approve(url: &reqwest::Url, duration: &char, my_headers: &(reqwest::header::Headers)) -> bool
{
    let my_data = serialize_duration(duration);

    let client = reqwest::Client::new();
    let res = client.post((*url).clone())
        .headers((*my_headers).clone())
        .form(&my_data)
        .send()
        .expect("Failed to send login request");

    let mut my_status = true;
    if res.status() != reqwest::StatusCode::Ok
    {
        my_status = false;
        println!("Error approving. Return status {}.", res.status());
    }
    else
    {
        println!("Succesfully approved");
    }

    my_status
}


fn main()
{
    let (username, password) = get_credentials();

    let duration = get_approval_duration();

    let login_url = reqwest::Url::parse("https://netaccess.iitm.ac.in/account/login").unwrap();
    let approve_url = reqwest::Url::parse("https://netaccess.iitm.ac.in/account/approve").unwrap();

    let my_headers = create_post_headers();

    if do_login(&login_url, &username, &password, &my_headers)
    {
        do_approve(&approve_url, &duration, &my_headers);
    }
}
